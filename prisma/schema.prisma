// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator erd {
  provider                      = "prisma-erd-generator"
  output                        = "../sandbox/DATABASE_ERD.svg"
  theme                         = "neutral"
  includeRelationshipFromFields = true
  ERD_DEBUG                     = true
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

// ============================= ENUMS ==============================

enum Role {
  ADMIN
  REGISTRY
  STUDENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Sem {
  FIRST
  SECOND
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

// ============================= MODELS =============================

// == MODEL: User

model User {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt
  isDisabled  Boolean  @default(false)

  email       String  @unique
  givenName   String?
  familyName  String?
  displayName String?
  picture     String?

  UserInfo    UserInfo?
  UserLevel   UserLevel @relation(fields: [userLevelId], references: [id])
  userLevelId String    @unique

  @@unique([id, email])
}

// == MODEL: UserInfo | TODO: Add more fields

model UserInfo {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  gender  Gender
  address String

  ClassSchedule ClassSchedule[]
  User          User            @relation(fields: [userId], references: [id])
  userId        String
  Department    Department      @relation(fields: [departmentId], references: [id])
  departmentId  String

  @@unique([userId])
}

// == MODEL: UserLevel

model UserLevel {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  email String
  role  Role   @default(STUDENT)
  User  User?

  @@unique([email])
}

// == MODEL: Department

model Department {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  isDisabled   Boolean        @default(false)
  name         String
  alias        String
  ClassSection ClassSection[]
  UserInfo     UserInfo[]

  @@unique([name, alias])
}

// == MODEL: Course

model Course {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  isDisabled         Boolean         @default(false)
  name               String
  alias              String
  ClassSchedule      ClassSchedule[] @relation("ScheduleCourse")
  CoursePrerequisite ClassSchedule[] @relation("Prerequisite")

  @@unique([name, alias])
}

// == MODEL: ClassSection

model ClassSection {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  name          String
  Department    Department      @relation(fields: [departmentId], references: [id])
  departmentId  String
  ClassSchedule ClassSchedule[]
}

// == MODEL: ClassSchedule

model ClassSchedule {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  sem            Sem
  day            Day
  timeStart      DateTime
  timeEnd        DateTime
  unit           Int
  labUnit        Int          @default(0)
  ClassSection   ClassSection @relation(fields: [classSectionId], references: [id])
  classSectionId String
  Course         Course       @relation("ScheduleCourse", fields: [courseId], references: [id])
  courseId       String
  Prerequisite   Course       @relation("Prerequisite", fields: [prerequisiteId], references: [id])
  prerequisiteId String
  UserInfo       UserInfo?    @relation(fields: [userInfoId], references: [id])
  userInfoId     String?
}
