// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

// generator erd {
//   provider                      = "prisma-erd-generator"
//   output                        = "../sandbox/erd.png"
//   theme                         = "neutral"
//   includeRelationshipFromFields = true
// }

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

// ============================= ENUMS ==============================

enum Role {
  ADMIN
  REGISTRY
  STUDENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// ============================= MODELS =============================

model User {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt
  isDisabled  Boolean  @default(false)

  email       String  @unique
  givenName   String?
  familyName  String?
  displayName String?
  picture     String?

  UserBasicInfo UserBasicInfo?

  UserRole   UserRole @relation(fields: [userRoleId], references: [id])
  userRoleId String   @unique

  @@unique([id, email, userRoleId])
}

model UserBasicInfo {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  gender  Gender
  address String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId])
}

model UserRole {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  email String
  role  Role   @default(STUDENT)
  User  User?

  @@unique([email])
}

model Department {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  name   String
  alias  String
  Course Course[]

  @@unique([name, alias])
}

model Course {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  name String
  code String

  Department    Department      @relation(fields: [departmentId], references: [id])
  departmentId  String
  ClassSchedule ClassSchedule[]

  @@unique([name, code])
}

model ClassSchedule {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  start DateTime
  end   DateTime

  Course   Course @relation(fields: [courseId], references: [id])
  courseId String
}
